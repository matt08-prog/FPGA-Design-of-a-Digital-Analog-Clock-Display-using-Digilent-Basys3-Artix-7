;;============================================================================
;; File: software.psm
;; This is the PicoBlaze program for EE178 Lab #7.
;;============================================================================

;;============================================================================
;; Port address declarations.
;;============================================================================

CONSTANT switches_lo     , 00 ; port for 8-bit switch input
CONSTANT switches_hi     , 01 ; port for 8-bit switch input
CONSTANT leds_lo         , 02 ; port for 8-bit led data out
CONSTANT leds_hi         , 03 ; port for 8-bit led data out

CONSTANT my_sid_lo       , aa ; lo byte of student id (put yours here)
CONSTANT my_sid_hi       , aa ; hi byte of student id (put yours here)

CONSTANT zero            , 00 ; zero
CONSTANT one             , 01 ; one

;;============================================================================
;; Infinite loop.
;;============================================================================

		 LOAD s7, 00
		 LOAD s8, 00
         loop: INPUT s0, switches_lo               ; get lo switch values
               INPUT s1, switches_hi               ; get hi switch values

               ; Currently, this program acts as a "virtual wire" by reading
               ; the switch values and copying them to the leds.  You should
               ; prove to yourself that this works.

               ; Then, you need to modify this program.  If the 16-bit switch
               ; value in {s1,s0} equals {my_sid_hi,my_sid_lo} then display it
               ; on the leds.  Otherwise, count the number of "1's" in {s1,s0}
               ; and display the result on the leds.

			   ; s5 holds the s1
			   LOAD s5, s1
			   COMPARE s5, my_sid_hi
			   JUMP NZ, count_ones
			
			   ; s6 holds the s0
			   LOAD s6, s0
			   COMPARE s6, my_sid_lo
			   JUMP NZ, count_ones
			
               OUTPUT s0, leds_lo                  ; put lo led values
               OUTPUT s1, leds_hi                  ; put hi led values

			   JUMP loop                           ; go back and repeat
			   
			   ; value to shift s1 by
   count_ones: LOAD s3, 08
			   
   shift_left: SL0 s5
			   ADDCY s7, 00
			   SL0 s6
			   ADDCY s7, 00
			   SUB s3, 01
			   JUMP NZ, shift_left
			   
			   OUTPUT s7, leds_lo
			   LOAD s7, 00

               JUMP loop                           ; go back and repeat

;;============================================================================
;;
;;============================================================================
